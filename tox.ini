# Tox configuration file
# Read more under https://tox.readthedocs.org/

[tox]
minversion = 3.15
isolated_build = true
skip_missing_interpreters = true
envlist =
    clean
    format
    py{36,38,39}-{test,flake8,docs,doctests,pdf,build}


[testenv:.venv]
description = Create virtualenv
recreate = true
usedevelop = true
extras =
    dev
    docs
    testing
envdir = .venv


[testenv:clean]
description = Clean the package
skip_install = true
changedir = {toxinidir}
commands =
    python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'


[testenv:format]
description = Format imports, code, and markdown files.
depends = clean
deps =
    black
    isort
    mdformat-gfm
skip_install = true
commands =
    isort src tests setup.py
    black src/ tests/
    mdformat --wrap 88 --end-of-line lf AUTHORS.md CHANGELOG.md README.md docs/ src/ tests/
    python3 scripts/sort_file.py whitelist.txt


[testenv:format-check]
description = Format imports, code, and markdown files.
deps =
    black
    isort
    mdformat-gfm
skip_install = true
commands =
    isort src tests setup.py -c -v
    black src/ tests/ --check
    #mdformat --check --wrap 88 --end-of-line lf AUTHORS.md CHANGELOG.md README.md docs/ src/ tests/
    python3 scripts/sort_file.py --check whitelist.txt


[testenv:py{36,38,39}-test]
description = invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
passenv =
    HOME
deps =
    flask
isolated_build = true
build = wheel
extras = testing
commands =
    coverage erase
    pytest {posargs}


[testenv:py{36,38,39}-flake8]
description = run flake8 on project
depends =
    py36: py36-test
    py38: py38-test
    py39: py39-test
deps =
    darglint
    flake8-2020>=1.6.0
    flake8-absolute-import>=1.0
    flake8-annotations>=2.7.0
    flake8-annotations-complexity>=0.0.6
    flake8-bandit>=2.1.2
    flake8-black>=0.2.3
    flake8-blind-except>=0.2.0
    flake8-breakpoint>=1.1.0
    flake8-broken-line>=0.3.0
    flake8-bugbear>=21.9.2
    flake8-builtins>=1.5.3
    flake8-class-attributes-order>=0.1.2
    flake8-comprehensions>=3.7.0
    flake8-datetimez>=20.10.0
    flake8-debugger>=4.0.0
    flake8-docstrings>=1.6.0
    flake8-dunder-class-obj>=0.1.1
    flake8-eradicate>=1.1.0
    flake8-executable>=2.1.1
    flake8-expression-complexity>=0.0.9
    flake8-fixme>=1.1.1
    flake8-if-expr>=1.0.4
    flake8-isort>=4.0.0
    flake8-logging-format>=0.6.0
    flake8-no-implicit-concat>=0.3.0
    flake8-pep3101>=1.3.0
    flake8-print>=4.0.0
    flake8-pytest>=1.3
    flake8-pytest-style>=1.5.0
    flake8-raise>=0.0.5
    flake8-requirements>=1.5.1
    flake8-return>=1.1.3
    flake8-simplify>=0.14.2
    flake8-spellcheck>=0.24.0
    flake8-strftime>=0.3.2
    flake8-string-format>=0.3.0
    flake8-super>=0.1.3
    flake8-use-pathlib>=0.2.0
    pep8-naming>=0.12.1
    flake8
    mdformat-gfm
skip_install = true
changedir = {toxinidir}
commands =
    flake8 src/
    flake8 --ignore=ABS101,ANN,DAR,D103,E501,S101 tests/


[testenv:py{36,38,39}-{docs,doctests,pdf}]
description = invoke sphinx-build to build the docs/run doctests
depends =
    py36: py36-flake8
    py38: py38-flake8
    py39: py39-flake8
setenv =
    AUTODOCDIR = api
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    pdf: BUILD = rinoh
    docs: BUILD = html
    doctests: BUILD = doctest
extras = docs
deps =
    sphinx>=3.2.1
commands =
    !py36-pdf: python -m sphinx.cmd.build -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:py{36,38,39}-build]
description =
    Build  the package in isolation according to instructions in:
depends =
    py36: py36-{docs,doctests}
    py38: py38-{docs,doctests}
    py39: py39-{docs,doctests}
skip_install = true
deps =
    py36: importlib-metadata==1.4
    build[virtualenv]
commands =
    python -m build --sdist --wheel .

[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository testpypi} dist/*
